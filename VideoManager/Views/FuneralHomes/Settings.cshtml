@model VideoManager.Models.ViewModels.FuneralHomeSettingViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles
{

    <link href="~/Content/jquery.fileupload.css" rel="stylesheet" />
    <link href="~/Content/jquery.fileupload-ui.css" rel="stylesheet" />
    <link href="~/Content/imgareaselect-default.css" rel="stylesheet" />
    <style>
        .fileupload-buttonbar {
            margin-top: -34px;
            margin-left: -171px;
        }

        .logo-row {
            padding: 0;
        }

        @@media (max-width: 760px) {
            .fileupload-buttonbar {
                margin-top: -34px;
                margin-left: 0;
            }
        }

        @@media (max-width: 579px) {
            .fileupload-buttonbar {
                margin-top: -34px;
                margin-left: 107px;
            }
        }

        @@media (max-width: 579px) {
            .fileupload-buttonbar {
                margin-top: -34px;
                margin-left: 147px;
            }
        }

        @@media (max-width: 380px) {
            .fileupload-buttonbar {
                margin-top: -34px;
                margin-left: 207px;
            }
        }
    </style>
}

<h2>Edit</h2>

@using (Html.BeginForm("Settings", "FuneralHomes"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@Model.Name</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.FuneralHomeId)


        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FuneralHomeNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FuneralHomeNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FuneralHomeNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        @{
    if (User.IsInRole("Admin"))
    {
        <div class="form-group">
            @Html.LabelFor(model => model.LogoPath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LogoPath, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LogoPath, "", new { @class = "text-danger" })
            </div>
        </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SlatePath, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SlatePath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SlatePath, "", new { @class = "text-danger" })
                </div>
            </div>
    <div class="form-group">
        @Html.LabelFor(model => model.AzureVMSize, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.SelectedAzureVM, new SelectList(Model.AzureVMSize, "Value", "Key"))
            @Html.ValidationMessageFor(model => model.AzureVMSize, "", new { @class = "text-danger" })
        </div>
    </div>
           
    }
    else
    {
        
        @Html.HiddenFor(model => model.LogoPath)
            @Html.HiddenFor(model => model.SlatePath)
            @Html.HiddenFor(model => model.SelectedAzureVM)
    }
        }

        <div class="form-group">
            @Html.LabelFor(model => model.WebsiteProvider, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.WebsiteProvider, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.WebsiteProvider, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrimaryContact, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrimaryContact, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PrimaryContact, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrimaryContactEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrimaryContactEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PrimaryContactEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrimaryContactPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrimaryContactPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PrimaryContactPhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewTabPdf, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.NewTabPdf, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.NewTabPdf, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SearchEngineFriendlyPDF, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.SearchEngineFriendlyPDF, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SearchEngineFriendlyPDF, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WhiteLabel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.WhiteLabel, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.WhiteLabel, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DisplayTutorials, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.DisplayTutorials, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DisplayTutorials, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div class="row">
    <div class="col-md-10 col-md-offset-2">

        <div class="btn btn-default">
            @Html.ActionLink("Cancel", "Index")
        </div>

        <div class="btn btn-default">
            @Html.ActionLink("Change Password", "SetPassword", new { id = Model.FuneralHomeId })
        </div>
        </div>
</div>
        @*The upload form No longer in USE
        <div id="filePlaceHolder" class="">
            <!-- The file upload form used as target for the file upload widget -->
            <form id="fileupload" method="POST" enctype="multipart/form-data">
                <!-- Redirect browsers with JavaScript disabled to the origin page -->
                <noscript><input type="hidden" name="redirect" value="http://www.midweststreams.com"></noscript>
                <!-- The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload -->
                <div class="row fileupload-buttonbar">
                    <div class="col-lg-12" style="text-align:center;">
                        <!-- The fileinput-button span is used to style the file input field as button -->
                        <span class="btn btn-success fileinput-button">
                            <i class="fa fa-file-image-o"></i>
                            <span>
                                @if (Model.LogoPath == null)
                                {
                                    <text>Upload Logo</text>
                                }
                                else
                                {
                                    <text>Change Logo</text>
                                }
                        </span>
                        <input type="file" name="files[]" multiple>
                    </span>

                    <!-- The global file processing state -->
                    <span class="fileupload-process"></span>
                </div>
                <!-- The global progress state -->
                <div class="col-lg-5 fileupload-progress fade">
                    <!-- The global progress bar -->
                    <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                    </div>
                    <!-- The extended global progress state -->
                    <div class="progress-extended">&nbsp;</div>
                </div>
            </div>
            <!-- The table listing the files available for upload/download -->
            <div id="files" class="files col-lg-12"></div>
        </form>
    </div>

</div>
</div>

<div class="row logo-row">
    <div class="image-container col-md-4 col-md-offset-1">
        @if (Model.LogoPath != null)
        {
            <img id="LogoImage" src="@System.Configuration.ConfigurationManager.AppSettings["poratalPath"]/FuneralHomes/getLogo/@Model.FuneralHomeId">
        }
    </div>
</div>



<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <div class="template-upload fade">
        <div class="videoContainer">
            <span class="preview"></span>
        </div>
        <div>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </div>
        <div>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </div>
        <div>
            {% if (!i && !o.options.autoUpload) { %}
            <button class="btn btn-primary start" disabled>
                <i class="glyphicon glyphicon-upload"></i>
                <span>Start</span>
            </button>
            {% } %}
            {% if (!i) { %}
            <button class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>Cancel</span>
            </button>
            {% } %}
        </div>
    </div>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download">

</script>
@section Scripts
{
    <script id="template-download">

    </script>
    <!-- The Templates plugin is included to render the upload/download listings -->
    <script src="~/Content/js/tmpl.min.js"></script>

    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="~/Content/js/load-image.all.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="~/Content/js/canvas-to-blob.min.js"></script>
    <!-- blueimp Gallery script -->
    <script src="~/Content/js/jquery.blueimp-gallery.min.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script src="~/Content/js/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="~/Content/js/jquery.fileupload.js"></script>
    <!-- The File Upload processing plugin -->
    <script src="~/Content/js/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="~/Content/js/jquery.fileupload-image.js"></script>
    <!-- The File Upload audio preview plugin -->
    <script src="~/Content/js/jquery.fileupload-audio.js"></script>
    <!-- The File Upload video preview plugin -->
    <script src="~/Content/js/jquery.fileupload-video.js"></script>
    <!-- The File Upload validation plugin -->
    <script src="~/Content/js/jquery.fileupload-validate.js"></script>
    <!-- The File Upload user interface plugin -->
    <script src="~/Content/js/jquery.fileupload-ui.js"></script>
    <script>

        $(function () {

            // Initialize the jQuery File Upload widget:
            $('#fileupload').fileupload({
                // Uncomment the following to send cross-domain cookies:
                //xhrFields: {withCredentials: true},
                url: '/FuneralHomes/UploadFiles',
                maxChunkSize: 10000000,
                singleFileUploads: true,
                autoUpload: true,
                acceptFileTypes: /(\.|\/)(jpe?g|png)$/i

            }).on('fileuploaddone', function (e, data) {

                var returnedFile = $("#files .name").text();
                returnedFile = data.result.files
                $(".image-container").html('<img src="@System.Configuration.ConfigurationManager.AppSettings["poratalPath"]/FuneralHomes/getLogo/@Model.FuneralHomeId?force=f"/>')
  
            }).on('fileuploadfail', function (e, data) {

            }).on('fileuploadstart', function (e, data) {

                $("#pageSelectorContainer").hide();

            });

            // Enable iframe cross-domain access via redirect option:
            $('#fileupload').fileupload(
                'option',
                'redirect',
                window.location.href.replace(
                    /\/[^\/]*$/,
                    '/cors/result.html?%s'
                )
            );
                });
            
        

</script>
}*@
