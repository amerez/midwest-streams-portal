@using Microsoft.AspNet.Identity
@model VideoManager.Models.Data.Video

@{
    ViewBag.Title = "Upload Service";
}

@section styles
{
    @Styles.Render("~/bundles/uploadcss")

<link href="~/Content/jquery.fileupload.css" rel="stylesheet" />
<link href="~/Content/jquery.fileupload-ui.css" rel="stylesheet" />
}

@section scripts
{
<script language="javascript" type="text/javascript" src="/Scripts/backstretch.js"></script>
<script>
    $.backstretch("/Content/images/sunsetTree.jpg", {speed:550});
</script>
<script id="template-download">

</script>
<script src="~/Content/js/tmpl.min.js"></script>

<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
<script src="~/Content/js/load-image.all.min.js"></script>
<!-- The Canvas to Blob plugin is included for image resizing functionality -->
<script src="~/Content/js/canvas-to-blob.min.js"></script>
<!-- blueimp Gallery script -->
<script src="~/Content/js/jquery.blueimp-gallery.min.js"></script>
<!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
<script src="~/Content/js/jquery.iframe-transport.js"></script>
<!-- The basic File Upload plugin -->
<script src="~/Content/js/jquery.fileupload.js"></script>
<!-- The File Upload processing plugin -->
<script src="~/Content/js/jquery.fileupload-process.js"></script>
<!-- The File Upload image preview & resize plugin -->
<script src="~/Content/js/jquery.fileupload-image.js"></script>
    <!-- The File Upload audio preview plugin -->
<script src="~/Content/js/jquery.fileupload-audio.js"></script>
    <!-- The File Upload video preview plugin -->
<script src="~/Content/js/jquery.fileupload-video.js"></script>
<!-- The File Upload validation plugin -->
<script src="~/Content/js/jquery.fileupload-validate.js"></script>
    <!-- The File Upload user interface plugin -->
<script src="~/Content/js/jquery.fileupload-ui.js"></script>
    <!-- The main application script -->
<script>

    
	var lastVideoDuration = 0;
    $(function () {
        var frontSideFileArray = new Array();
        var fileArray = new Array();
        var uploadCounter = 0;
        var numberOfFiles = 0;
        var lastVideoLength = 0;
        var firstVideoLength = 0;
        var i = 0;
        var totalVideoLength = 0;
        var videoDurationToSendToServer = 0;
        
        'use strict';

        var userName = "@(User.Identity.GetUserName().Replace(" ", ""))";

        // Initialize the jQuery File Upload widget:
        $('#fileupload').fileupload({
            // Uncomment the following to send cross-domain cookies:
            //xhrFields: {withCredentials: true},
            //url: '/server/php/',
            //url: '/Backload/UploadHandler',
            url: '/video/chunkTest',
            maxChunkSize: 10000000,
            //multipart: false,
            singleFileUploads: true,
            acceptFileTypes: /^[a-zA-Z0-9_]+\.[mM][pP][4]$/,
            //acceptFileTypes:  /\.mp4$/,
        }).on('fileuploadchunksend', function (e, data) {
            //send chunk

        })
    .on('fileuploadchunkdone', function (e, data) {
        //chunk done

    })
    .on('fileuploadchunkfail', function (e, data, status) {
        //chunk fail

    }).on('fileuploaddone', function (e, data) {

        var returnedFile = userName+"_"+data.result.files;
        returnedFile = returnedFile.replace(/ /g, "").replace(/,/g,"");
        //fileArray.push(data.result.files);
        fileArray.push(returnedFile);
        uploadCounter++;
        /*var returnedFile = $("#files .name").text();
        $.each(data.result.files, function (index, item) {
            returnedFile = item.name;
        });*/


            //This File Upload Done method fires every time that a file finishes uploading we only want this to fire once all the files have been uploaded 
            //So this code below gets the number of files on the page and matches it with the number of times this method has been executed

            sortedFileArray = sortFileArray(frontSideFileArray, fileArray);
            var videoIn = parseInt($("#videoIn").val());
            if (videoIn === "") 
            {
                videoIn = 0;
            }
            if(uploadCounter==numberOfFiles) {
                sendInfoToServer(sortedFileArray, videoIn, videoDurationToSendToServer);
            }
         
            //sendInfoToServer(fileArray, videoIn, videoEnd);

        }).on('fileuploadfail', function (e, data) {

            var videoIn = $("#videoIn").val();
            var videoEnd = $("#videoOut").val();
            var fileurl = $("#files .name").text();
            //ToDo create a better email message
            var emailMessage = "There was an error uploading a service";

            var postData = { emailad: "shane.p.white@gmail.com", subject: "Error uploading a service", emailbod:  emailMessage};

            $("video").remove();
            $(".color-container").remove();
            $(".btn").remove();
            $("#filePlaceHolder").removeClass("col-lg-6 col-lg-offset-3");
            $("#filePlaceHolder").addClass("col-lg-12");
            $("#files").html("<div class=\"jumbotron\" style=\"border-radius:10px;\"><h1 style=\"color: #b94a48;\">Funeral failed to upload!</h1><br>Ensure you are connected to the internet, refresh the page, and retry the upload. If you have tried this three times please contact support@@midweststreams.com</p></div>");
            $('.color-container').hide();
            $.each(data.files, function (index, file) {
                var error = $('<span class="text-danger"/>').text('File upload failed.');
                $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
            });
        }).on('fileuploadchange', function (e, data) {
            $.each(data.files, function (index, item) {
                frontSideFileArray[i] = item.name;
                i++;
            });
       
            $('#secondButtons').show(); 
            
        }).on('fileuploadstart', function (e, data) {
        
            numberOfFiles =  $(".name").length;
            
            var middleVideos = 0;
            //Loop through all the videos to get the duration.
            var len = $('video').length;
            $.each($('video'), function(vidIndex,val){
               
                //Get last video length
                if(vidIndex==len-1)
                {
                    lastVideoLength = parseInt(val.duration);
                }
                else
                {   //Get First Video Length
                    if(vidIndex==0)
                    {
                        firstVideoLength = parseInt(val.duration);
                    }
                        //get middle videos length
                    else
                    {
                        middleVideos = middleVideos + parseInt(val.duration);
                    }
                 
                }
          
            });

            var videoIn = parseInt($("#videoIn").val());
            if (videoIn === "") 
            {
                videoIn = 0;
            }
            var videoEnd = parseInt($("#videoOut").val());
            if (videoEnd ==="")
            {
                videoEnd = lastVideoLength
            }
            var remainingDurationOfFirstVideo = firstVideoLength-videoIn;
            var duration = videoEnd + remainingDurationOfFirstVideo+middleVideos;
            videoDurationToSendToServer = duration;
        });


        //function to sort file array
 

        function sortFileArray(sortedArray, unSortedArray){
            var fullySortedFileNames = [];
            $.each(sortedArray, function( index, fileName ) {
                var fileNameNoExt = fileName.replace('.mp4','');
                $.each(unSortedArray, function( j, unSortedName){
                    if (unSortedName.indexOf(fileNameNoExt) >= 0)
                    {
                        fullySortedFileNames.push(unSortedName);
                    }
                });
            });

            return fullySortedFileNames;
        }

        var totalLength = 0;
        var player = this;
        $('video, audio', this).bind('durationchange', function () {
            alert('change')
            var duration = $.prop(this, 'duration');
            if(!isNaN(duration))
            {     
                totalLength=duration+totalLength;
            }
            if (!duration) {
                return;
            }
            lastVideoDuration = duration;
        });
         
        


        //Get total length of all the videos


    // Enable iframe cross-domain access via redirect option:
    $('#fileupload').fileupload(
        'option',
        'redirect',
        window.location.href.replace(
            /\/[^\/]*$/,
            '/cors/result.html?%s'
        )
    );

        // Load existing files:
        $('#fileupload').addClass('fileupload-processing');
        $.ajax({
            // Uncomment the following to send cross-domain cookies:
            //xhrFields: {withCredentials: true},
            url: $('#fileupload').fileupload('option', 'url'),
            dataType: 'json',
            context: $('#fileupload')[0]
        }).always(function () {
            $(this).removeClass('fileupload-processing');
        }).done(function (result) {
            $(this).fileupload('option', 'done')
                .call(this, $.Event('done'), {result: result});
        });

        $('#getFileName').click(function(){

            $( "span:contains('start')" ).hide();
            var fileArray = new Array();
            var i =0;
            $(".name").each(function() {
                fileArray[i] = $(this).text();
                i++;
            });
            var numberOfFiles =  $(".name").length;
            alert(numberOfFiles);
            //sendInfoToServer(fileArray, 3, 5);
        });

        $('#setIn').click(function () {

        	$("#start-checkmark").removeClass("hidden");
                var secsec = parseInt($('#inSeconds').val());
                var minutessec = parseInt($('#inMinutes').val()*60);
                var hoursec =  parseInt($('#inHours').val()*3600);
                var totalSeconds = secsec+minutessec+hoursec;
                if(isNaN(totalSeconds)==true)
                {
                    totalSeconds = 0;
                }
                $('#videoIn').val(totalSeconds);
              
                
        

      
        });
      
        $('#setOut').click(function () {
         
        	$("#end-checkmark").removeClass("hidden");
                var secsec = parseInt($('#outSeconds').val());
                var minutessec = parseInt($('#outMinutes').val()*60);
                var hoursec =  parseInt($('#outHours').val()*3600);
              
                var totalSeconds = secsec+minutessec+hoursec;
                if(isNaN(totalSeconds)==true)
                {
                    totalSeconds = 0;
                }
                $('#videoOut').val(totalSeconds);
              
                $("#start-checkmark").removeClass("hidden");
       


        });
        $('#debug').click(function(){
           
            $.each($('video'), function(vidIndex,val){
                //do something
            });
            numberOfFiles =  $(".name").length;
            
            var middleVideos = 0;
            //Loop through all the videos to get the duration.
            var len = $('video').length;
            $.each($('video'), function(vidIndex,val){              
                //Get last video length
                if(vidIndex==len-1)
                {
                    lastVideoLength = parseInt(val.duration);
                }
                else
                {   //Get First Video Length
                    if(vidIndex==0)
                    {
                        firstVideoLength = parseInt(val.duration);
                    }
                        //get middle videos length
                    else
                    {
                        middleVideos = middleVideos + parseInt(val.duration);
                    }
                 
                }
          
            });

      
            var videoIn = parseInt($("#videoIn").val());
            if (videoIn === "") 
            {
                videoIn = 0;
            }
        
            var videoEnd = parseInt($("#videoOut").val());
            if (videoEnd ==="")
            {
                videoEnd = lastVideoLength
            }
            var remainingDurationOfFirstVideo = firstVideoLength-videoIn;
            var duration = videoEnd + remainingDurationOfFirstVideo+middleVideos;
            
             $("#filePlaceHolder").removeClass("col-lg-6 col-lg-offset-3");
             $("#filePlaceHolder").addClass("col-lg-12");
             $("#filePlaceHolder").html("<div class=\"jumbotron\" style=\"border-radius:10px; color:black;\"><h1>Funeral successfully uploaded</h1><br>Our servers are now going to process the video, the viewing page should be ready in a few hours</p></div>");
             $('.color-container').hide();
        
            //This File Upload Done method fires every time that a file finishes uploading we only want this to fire once all the files have been uploaded 
            //So this code below gets the number of files on the page and matches it with the number of times this method has been executed
                sendInfoToServer(frontSideFileArray, videoIn, duration);
            
        });

        $('#getLastVideo').click(function(){
            var roundedTime = Math.round($('video:last').get(0).currentTime);
           
            $('#videoOut').val(roundedTime);
            $('#outSeconds').val(roundedTime).change();
        });
        $('#getFirstVideo').click(function(){
            var roundedTime = Math.round($('video:first').get(0).currentTime);
            $('#videoIn').val(roundedTime);
            $('#inSeconds').val(roundedTime).change();
        });
        var videoCount = 0;
        $('body').on('DOMNodeInserted', 'video', function () {
            if(videoCount==0)
            {
              
                $('.videoin').css('visibility', 'visible');
                $(".videoin").detach().appendTo('.timeContainer:first')
            }
            else
            {
                $('.videoout').css('visibility', 'visible');
                $(".videoout").detach().appendTo('.timeContainer:last')
            }
            videoCount++;
           
        
        });
 
});


		 function sendInfoToServer(fileNames, videoIn, videoEnd) {

		 	if(isNaN(videoIn))
		 	{
		 		videoIn=0;
		 	}
		 	if(isNaN(videoOut))
		 	{
		 		videoEnd = lastVideoDuration;
		 	}
            var serviceId = @(Model.Id);
            var postUrl = "/video/uploaddetailsmulti/"+serviceId;

			fileNames = JSON.stringify(fileNames);

            $token = $('input[name="__RequestVerificationToken"]').val();
            var test = $('THolder');
            var postData = { fileurls: fileNames, inpoint: videoIn, outpoint: videoEnd };

            //var postData = { username: "us" };
            var posting = $.ajax({
                url: postUrl,
                type: "POST",
                dataType: "json",
                //crossDomain:true,
                //timeout:3000,
                //contentType: "application/json: charset=utf-8",
                //headers: { __RequestVerificationToken: $token },
                data: postData
            });
            posting.done(function (json, responseText, jsonResponse) {
                 $("#filePlaceHolder").removeClass("col-lg-6 col-lg-offset-3");
                 $("#filePlaceHolder").addClass("col-lg-12");
                 $("#filePlaceHolder").html("<div class=\"jumbotron\" style=\"border-radius:10px; color:black;\"><h1>Funeral successfully uploaded</h1><br>Our servers are now going to process the video, the viewing page should be ready in a few hours</p></div>");
                 $('.color-container').hide();
            });
            posting.error(function (jqXHR, textStatus, errorThrown) {
            	sendErrorToServer("An error occured when posting to videouploaddetails multi. Service ID:" + serviceId + " Video In:" + videoIn + " Video Out:" + videoEnd+" Error Thrown: "+errorThrown);
            	$("video").remove();
            	$(".color-container").remove();
            	$(".btn").remove();
            	$("#filePlaceHolder").removeClass("col-lg-6 col-lg-offset-3");
            	$("#filePlaceHolder").addClass("col-lg-12");
            	$("#files").html("<div class=\"jumbotron\" style=\"border-radius:10px;\"><h1 style=\"color: #b94a48;\">Funeral failed to upload!</h1><br>Ensure you are connected to the internet, refresh the page, and retry the upload. If you have tried this three times please contact support@@midweststreams.com</p></div>");
            	$('.color-container').hide();
                // alert(errorThrown);
            });

            return false;
		 };
	function sendErrorToServer(emailbod)
	{
   
		//var postUrl = "/video/uploaddetails/"+serviceId;
		var postUrl = "/video/sendErrorEmail";
		var postData = { emailBod: emailbod };
		$token = $('input[name="__RequestVerificationToken"]').val();
		var test = $('THolder');

		//var postData = { username: "us" };
		var posting = $.ajax({
			url: postUrl,
			type: "POST",
			dataType: "json",
			data: postData
		});
		posting.done(function (json, responseText, jsonResponse) {

		});
		posting.error(function (jqXHR, textStatus, errorThrown) {
	
			// alert(errorThrown);
		});
	};

    $(function () {


   
        $( "#inSeconds, #inMinutes, #inHours" ).change( function() {
        	$("#end-checkmark").addClass("hidden");

        	$("#start-checkmark").addClass("hidden");

            var seconds = $("#inSeconds").val();
            var minutes = 0;
            var hours = 0;

            if(seconds < 3600 && seconds > 60)
            {
                minutes = seconds/60;
                seconds = seconds%60;
                minutes = Math.floor(minutes);
                $("#inSeconds").val(seconds);
                $("#inMinutes").val(minutes);
                $("#inHours").val(0);
            }
            if(seconds >= 3600)
            {
                minutes = seconds/60;
                seconds = seconds%60;
                minutes = Math.floor(minutes);
        
                hours = minutes/60;
                minutes = minutes%60;
                hours = Math.floor(hours);
        
                $("#inSeconds").val(seconds);
                $("#inMinutes").val(minutes);
                $("#inHours").val(hours);
        
        
            }
        });

        $( "#outSeconds, #outMinutes, #outHours" ).change( function() {
        	
        	$("#end-checkmark").addClass("hidden");

        	var seconds = $("#outSeconds").val();
            var minutes = 0;
            var hours = 0;

            if(seconds < 3600 && seconds > 60)
            {
                minutes = seconds/60;
                seconds = seconds%60;
                minutes = Math.floor(minutes);

                $("#outSeconds").val(seconds);
                $("#outMinutes").val(minutes);
                $("#outHours").val(0);
 
            }
            if(seconds >= 3600)
            {
                minutes = seconds/60;
                seconds = seconds%60;
                minutes = Math.floor(minutes);
        
                hours = minutes/60;
                minutes = minutes%60;
                hours = Math.floor(hours);
        
                $("#outSeconds").val(seconds);
                $("#outMinutes").val(minutes);
                $("#outHours").val(hours);
            }
        });
 
        $("#inHours, #inMinutes, #inSeconds, #outHours, #outMinutes #outSeconds").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A
                (e.keyCode == 65 && e.ctrlKey === true) || 
                // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
    });



 

</script>
}
<style>
    .jumbotron {
      
        background-color: #e1e1e1;
    }

    .btn-primary {
        background-color: #357ebd;
    }
    .input-sm{
        padding: 5px 9px;
    }
    #filePlaceHolder {
        background-color: rgba(50, 50, 50, .9);
        border-radius: 10px;
        padding: 15px;
        color: white;
    }
    .table .start
    {
        display:none;
    }
    .table .cancel
    {
        display: none;
    }
    .delete
    {
        display:none;
    }

 
    .template-upload:first-child .videoin
    {
        
        visibility:visible;
    }
 
    #getFileName{
        display:none;
    }
    .template-upload:last-child .videoout {
        visibility: visible;
    }
    .name{margin-top:50px;}
    .videoin{
        visibility:hidden;
    }
    .videoout{
        visibility:hidden;
    }
    #videoIn{
      
    }
    #videoOut{
      
    }
    .fileupload-buttonbar .toggle{
        display:none;
    }
   #secondButtons
   {
       display:none;
   }
   .timeContainer{
       margin-top: 15px;
       margin-left: -16px;
   }
    #secondsContainers
    {
        display: none;
    }
    #debug{
        display: none;
    }
</style>


<div class="jumbotron">
    <h1>Service for @Model.FirstName @Model.LastName</h1>
	<p>File names can only contain letters, numbers, and underscores. All other characters are not allowed.</p>


</div>

<div id="debug" class="btn btn-danger hidden">Test Button</div>
<br />
<div class="row">
    <h1 id="getFileName" class="btn btn-danger" >get file names</h1>
    <div id="filePlaceHolder" >
        <!-- The file upload form used as target for the file upload widget -->
        <form id="fileupload" method="POST" enctype="multipart/form-data">
            <!-- Redirect browsers with JavaScript disabled to the origin page -->
            <noscript><input type="hidden" name="redirect" value="http://blueimp.github.io/jQuery-File-Upload/"></noscript>
            <!-- The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload -->
            <div class="row fileupload-buttonbar">
                <div class="col-lg-7">
                    <!-- The fileinput-button span is used to style the file input field as button -->
                    <span class="btn btn-success fileinput-button">
                        <i class="glyphicon glyphicon-plus"></i>
                        <span>Add files...</span>
                        <input type="file" name="files[]" multiple>
                    </span>
                    <button type="submit" class="btn btn-primary start">
                        <i class="glyphicon glyphicon-upload"></i>
                        <span>Start upload</span>
                    </button>
                    <button type="reset" class="btn btn-warning cancel">
                        <i class="glyphicon glyphicon-ban-circle"></i>
                        <span>Cancel upload</span>
                    </button>
                    <button type="button" class="btn btn-danger delete">
                        <i class="glyphicon glyphicon-trash"></i>
                        <span>Delete</span>
                    </button>
                    <input type="checkbox" class="toggle">
                    <!-- The global file processing state -->
                    <span class="fileupload-process"></span>
                </div>
                <!-- The global progress state -->
                <div class="col-lg-5 fileupload-progress fade">
                    <!-- The global progress bar -->
                    <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                    </div>
                    <!-- The extended global progress state -->
                    <div class="progress-extended">&nbsp;</div>
                </div>
            </div>
            <!-- The table listing the files available for upload/download -->
            <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>
            <div id="secondButtons" class="row fileupload-buttonbar">
                <div class="col-lg-7">
                    <!-- The fileinput-button span is used to style the file input field as button -->
                    <span class="btn btn-success fileinput-button">
                        <i class="glyphicon glyphicon-plus"></i>
                        <span>Add files...</span>
                        <input type="file" name="files[]" multiple>
                    </span>
                    <button type="submit" class="btn btn-primary start">
                        <i class="glyphicon glyphicon-upload"></i>
                        <span>Start upload</span>
                    </button>
                    <button type="reset" class="btn btn-warning cancel">
                        <i class="glyphicon glyphicon-ban-circle"></i>
                        <span>Cancel upload</span>
                    </button>
                    <button type="button" class="btn btn-danger delete">
                        <i class="glyphicon glyphicon-trash"></i>
                        <span>Delete</span>
                    </button>
                    <input type="checkbox" class="toggle">
                    <!-- The global file processing state -->
                    <span class="fileupload-process"></span>
                </div>
                <!-- The global progress state -->
                <div class="col-lg-5 fileupload-progress fade">
                    <!-- The global progress bar -->
                    <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                    </div>
                    <!-- The extended global progress state -->
                    <div class="progress-extended">&nbsp;</div>
                </div>
            </div>
        </form>
    </div>
    <br>

    <div class="input-group col-lg-6 videoin">
        <span class="input-group-btn" style="width:0px;">
            <span id="getFirstVideo" class="btn btn-primary  input-sm">Get Video Time</span>
        </span>
        <span class="input-group-btn" style="width:0px;"></span>
        <input type="text" class="form-control input-sm time-width" id="inHours" placeholder="H" />
        <span class="input-group-btn" style="width:0px;"></span>
        <input type="text" class="form-control input-sm time-width" id="inMinutes" placeholder="MM" />
        <span class="input-group-btn" style="width:0px;"></span>
        <input type="text" class="form-control input-sm time-width" id="inSeconds" placeholder="ss" />
        <span class="input-group-btn" style="width:0px;"></span>

        <span class="input-group-btn" style="width:0px;">
            <span id="setIn" class="btn btn-success  input-sm"><i id="start-checkmark" class="fa fa-check hidden"></i>Set Start</span>
        </span>
    </div>

    <div class="input-group col-lg-6 videoout">

        <span class="input-group-btn" style="width:0px;">
            <span id="getLastVideo" class="btn btn-primary  input-sm">Get Video Time</span>
        </span>
        <span class="input-group-btn" style="width:0px;"></span>
        <input type="text" class="form-control input-sm time-width" id="outHours" placeholder="H" />
        <span class="input-group-btn" style="width:0px;"></span>
        <input type="text" class="form-control input-sm time-width" id="outMinutes" placeholder="MM" />
        <span class="input-group-btn" style="width:0px;"></span>
        <input type="text" class="form-control input-sm time-width" id="outSeconds" placeholder="ss" />
       

        <span class="input-group-btn" style="width:0px;">
            <span id="setOut" class="btn btn-danger  input-sm"><i id="end-checkmark" class="fa fa-check hidden"></i>Set End</span>
        </span>
    </div>
</div>



<div class="fileHolder">
    <!-- The template to display files available for upload -->
    <script id="template-upload" type="text/x-tmpl">

        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <div class="template-upload fade">

            <div class="videoContainer">
                <span class="preview"></span>
                <div class="timeContainer"></div>
            </div>
            <div>
                <p class="name">{%=file.name%}</p>
                <strong class="error text-danger"></strong>
            </div>
            <div>
                <p class="size">Processing...</p>
                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
            </div>
            <div>
                {% if (!i && !o.options.autoUpload) { %}
                <button class="btn btn-primary start" disabled>
                    <i class="glyphicon glyphicon-upload"></i>
                    <span>Start</span>
                </button>
                {% } %}
                {% if (!i) { %}
                <button class="btn btn-warning cancel">
                    <i class="glyphicon glyphicon-ban-circle"></i>
                    <span>Cancel</span>
                </button>
                {% } %}
            </div>
        </div>
        {% } %}
    </script>
</div>
     <!-- The template to display files available for download -->
     <script id="template-download">

     </script>
<div id="secondsContainers">
    <input type="text" id="videoIn" class="form-control " placeholder="0" />
    <input type="text" class="form-control" id="videoOut" placeholder="0" />
</div>